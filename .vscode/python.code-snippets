{
    // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }

    "辞書をソートする": {
        "prefix": "dsort",
        "body": [
            "dict(sorted($1.items(), key=lambda x: x[$2], reverse=$3))"
        ],
        "description": "辞書をソートする"
    },
    "任意の数字 n について n 以下の素数を返す": {
        "prefix": "make_primes",
        "body": [
            "def make_primes(n):",
            "    from math import sqrt",
            "    if n < 2:",
            "        return",
            "    sieve = [True] * (n + 1)",
            "    for i in range(2, int(sqrt(n)) + 1):",
            "        if sieve[i]:",
            "            for j in range(i * i, n + 1, i):",
            "                sieve[j] = False",
            "    for i in range(2, n + 1):",
            "        if sieve[i]:",
            "            yield i",
            ""
        ],
        "description": "任意の数字 n について n 以下の素数を返す"
    },
    "n 番目のフィボナッチ数列を求める": {
        "prefix": "fib",
        "body": [
            "class Fibonacci:",
            "    def __init__(self, n):",
            "        self.fi = [0, 1]",
            "        if n > 1:",
            "            for _ in range(1, n):",
            "                self.fi.append(self.fi[-2] + self.fi[-1])",
            "",
            "    def fib(self, n):",
            "        return self.fi[n]",
            "",
            "n = 100",
            "Fib = Fibonacci(n)",
            ""
        ],
        "description": "n 番目のフィボナッチ数列を求める"
    },
    "指定した値で整列済みの配列内を検索し、インデックス番号を返す": {
        "prefix": "binary_search",
        "body": [
            "def binary_search(a, target):",
            "    l, r = (0, len(a) - 1)",
            "    while l <= r:",
            "        c = (l + r) // 2",
            "        if a[c] == target:",
            "            return c",
            "        elif a[c] < target:",
            "            l = c + 1",
            "        else:",
            "            r = c - 1",
            "    else:",
            "        return -1",
            "",
            "ans = binary_search($1, $2)"
        ],
        "description": "指定した値で整列済みの配列内を検索し、インデックス番号を返す"
    },
    "ビット全探索": {
        "prefix": "bit",
        "body": [
            "for i in range(1 << N):",
            "    for j in range(N):",
            "        bit = (i >> j) & 1",
            "        if bit:",
            "            print(j, end=\"\")",
            "    print()",
        ],
        "description": "ビット全探索"
    },
    "Divisor (約数) of N": {
        "prefix": "",
        "body": [
            "def divisor(N):",
            "    ans = []",
            "    for i in range(1, N + 1):",
            "        if i * i > N:",
            "            break",
            "        if N % i == 0:",
            "            ans.append(i)",
            "            d = N // i ",
            "            if d != i:",
            "                ans.append(d)",
            "    ans.sort()",
            "    return ans"
        ],
        "description": "Divisor (約数) of N"
    },
    "is_prime (素数判定) of N": {
        "prefix": "",
        "body": [
            "def is_prime(N):",
            "    if N < 2:",
            "        return False ",
            "    for i in range(2, N):",
            "        if i * i > N:",
            "            break",
            "        if N % i == 0: ",
            "            return False",
            "    return True "
        ],
        "description": "is_prime (素数判定) of N"
    }
    "Direction Vector": {
        "prefix": "directions",
        "body": [
            "directions = zip(dy := [1, -1,  0,  0,  1, -1,  1, -1],",
            "                 dx := [0,  0,  1, -1,  1, -1, -1,  1])"
        ],
        "description": "Direction Vector"
    }
    "Graph Problems": {
        "prefix": "graph",
        "body": [
            "G = [[] for _ in range(N)]",
            "G = [[0 for _ in range(N)] for _ in range(N)]",
            "seen = [0 for _ in range(N)]"
        ],
        "description": "Graph Problems"
    }
    "Infinity": {
        "prefix": "inf",
        "body": [
            "1 << 60"
        ],
        "description": "Infinity"
    }
}